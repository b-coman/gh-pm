name: Security & Quality Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  security-tests:
    name: Security & Linting
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq shellcheck
        
    - name: Install GitHub CLI
      run: |
        curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
        sudo apt update
        sudo apt install gh
        
    - name: Verify project structure
      run: |
        echo "üìã Project Structure Verification"
        echo "================================="
        
        # Check for required directories
        test -d scripts/lib || { echo "‚ùå Missing scripts/lib directory"; exit 1; }
        test -d tests || { echo "‚ùå Missing tests directory"; exit 1; }
        
        # Check for critical security files
        test -f scripts/lib/security-utils.sh || { echo "‚ùå Missing security-utils.sh"; exit 1; }
        test -f scripts/lib/error-utils.sh || { echo "‚ùå Missing error-utils.sh"; exit 1; }
        test -f .shellcheckrc || { echo "‚ùå Missing .shellcheckrc"; exit 1; }
        test -f .gitignore || { echo "‚ùå Missing .gitignore"; exit 1; }
        
        echo "‚úÖ All required files present"
        
    - name: Run ShellCheck linting
      run: |
        echo "üîç Running ShellCheck on all scripts"
        echo "====================================="
        
        # Find and check all shell scripts
        EXIT_CODE=0
        
        find . -name "*.sh" -type f | while read -r script; do
          echo "Checking: $script"
          if ! shellcheck "$script"; then
            EXIT_CODE=1
          fi
        done
        
        exit $EXIT_CODE
        
    - name: Test security utilities
      run: |
        echo "üß™ Testing Security Functions"
        echo "============================="
        
        # Source security utilities and test basic functions
        cd scripts
        source lib/security-utils.sh
        
        # Test input validation
        echo "Testing validate_issue_number..."
        
        # Valid inputs should pass
        validate_issue_number "42" || { echo "‚ùå Failed valid input test"; exit 1; }
        validate_issue_number "123" || { echo "‚ùå Failed valid input test"; exit 1; }
        
        # Invalid inputs should fail
        ! validate_issue_number "abc" || { echo "‚ùå Failed invalid input test"; exit 1; }
        ! validate_issue_number "'; DROP TABLE users;--" || { echo "‚ùå Failed injection test"; exit 1; }
        ! validate_issue_number "" || { echo "‚ùå Failed empty input test"; exit 1; }
        
        echo "‚úÖ Security validation tests passed"
        
    - name: Test script security hardening
      run: |
        echo "üõ°Ô∏è Testing Security Hardening"
        echo "============================="
        
        # Mock GitHub CLI for testing
        mkdir -p ~/.local/bin
        cat > ~/.local/bin/gh << 'EOF'
        #!/bin/bash
        if [[ "$1" == "auth" && "$2" == "status" ]]; then
          echo "‚úì Logged in to github.com as test-user"
          exit 0
        fi
        echo "Mock gh command: $*"
        exit 0
        EOF
        chmod +x ~/.local/bin/gh
        export PATH="$HOME/.local/bin:$PATH"
        
        # Create minimal test config
        cat > config.json << 'EOF'
        {
          "github": {
            "owner": "test-owner",
            "repository": "test-repo"
          },
          "project": {
            "id": "PVT_test123",
            "url": "https://github.com/users/test-owner/projects/1",
            "number": 1
          }
        }
        EOF
        
        # Test key scripts reject malicious input
        echo "Testing injection attack prevention..."
        
        # Test SQL injection
        if ./scripts/workflow/start-workflow-task.sh --dry-run "'; DROP TABLE users;--" 2>&1 | grep -q "must be numeric"; then
          echo "‚úÖ SQL injection properly rejected"
        else
          echo "‚ùå SQL injection vulnerability detected"
          exit 1
        fi
        
        # Test GraphQL injection  
        if ./scripts/workflow/review-workflow-task.sh --dry-run '"; } mutation { deleteAll } { "' 2>&1 | grep -q "must be numeric"; then
          echo "‚úÖ GraphQL injection properly rejected"
        else
          echo "‚ùå GraphQL injection vulnerability detected"
          exit 1
        fi
        
        # Test command injection
        if ./scripts/workflow/complete-task.sh --dry-run '$(rm -rf /)' 2>&1 | grep -q "must be numeric"; then
          echo "‚úÖ Command injection properly rejected"
        else
          echo "‚ùå Command injection vulnerability detected"
          exit 1
        fi
        
        echo "üéâ All security tests passed!"
        
    - name: Verify no sensitive data in repo
      run: |
        echo "üîí Checking for sensitive data"
        echo "============================="
        
        # Check for potential secrets or API keys
        if git log --all --full-history -- config.json | grep -q "config.json"; then
          echo "‚ö†Ô∏è  config.json found in git history - verify no secrets committed"
        fi
        
        # Check for hardcoded secrets patterns (more specific to avoid false positives)
        if grep -rE "ghp_[a-zA-Z0-9]{36}|github_pat_[a-zA-Z0-9_]{82}|sk-[a-zA-Z0-9]{48}" . --exclude-dir=.git; then
          echo "‚ùå Potential secrets found in repository"
          exit 1
        fi
        
        echo "‚úÖ No sensitive data detected"
        
    - name: Test dry-run mode safety
      run: |
        echo "üß™ Testing Dry-Run Safety"
        echo "========================="
        
        # Create mock configuration for testing
        cp config-template.json config.json
        sed -i 's/YOUR_GITHUB_USERNAME/test-user/g' config.json
        sed -i 's/YOUR_REPOSITORY_NAME/test-repo/g' config.json
        sed -i 's/YOUR_PROJECT_ID/PVT_test123/g' config.json
        sed -i 's/TASK_TYPE_FIELD_ID/PVTSSF_task_type/g' config.json
        sed -i 's/RISK_LEVEL_FIELD_ID/PVTSSF_risk_level/g' config.json
        sed -i 's/EFFORT_FIELD_ID/PVTSSF_effort/g' config.json
        sed -i 's/STATUS_FIELD_ID/PVTSSF_status/g' config.json
        sed -i 's/DEPENDENCIES_FIELD_ID/PVTSSF_dependencies/g' config.json
        
        echo "‚úÖ Mock configuration created"
        
        # Mock GitHub CLI for testing
        export PATH="$HOME/.local/bin:$PATH"
        
        # Verify dry-run mode doesn't make actual changes
        echo "Testing dry-run mode prevents actual execution..."
        
        # All these should complete without errors and without making real changes
        ./scripts/workflow/start-workflow-task.sh --dry-run 42 || { echo "‚ùå start-workflow-task dry-run failed"; exit 1; }
        ./scripts/workflow/review-workflow-task.sh --dry-run 42 "test" || { echo "‚ùå review-workflow-task dry-run failed"; exit 1; }
        ./scripts/workflow/complete-task.sh --dry-run 42 "test" || { echo "‚ùå complete-task dry-run failed"; exit 1; }
        
        echo "‚úÖ Dry-run mode working correctly"

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Check file headers
      run: |
        echo "üìù Checking File Headers"
        echo "========================"
        
        missing_headers=0
        
        # Check that main scripts have proper headers
        for script in scripts/*/*.sh; do
          if [[ -f "$script" ]] && ! grep -q "@fileoverview" "$script"; then
            echo "‚ùå Missing header: $script"
            missing_headers=$((missing_headers + 1))
          fi
        done
        
        if [[ $missing_headers -gt 0 ]]; then
          echo "‚ùå $missing_headers scripts missing proper headers"
          exit 1
        fi
        
        echo "‚úÖ All scripts have proper headers"
        
    - name: Check documentation completeness
      run: |
        echo "üìö Documentation Completeness"
        echo "============================="
        
        # Check for key documentation files
        test -f README.md || { echo "‚ùå Missing README.md"; exit 1; }
        test -f SECURITY_IMPROVEMENTS_COMPLETE.md || { echo "‚ùå Missing security documentation"; exit 1; }
        
        # Check README has basic sections
        grep -q "Installation" README.md || { echo "‚ùå README missing Installation section"; exit 1; }
        grep -q "Usage" README.md || { echo "‚ùå README missing Usage section"; exit 1; }
        
        echo "‚úÖ Documentation complete"

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [security-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq
        
    - name: Test configuration system
      run: |
        echo "‚öôÔ∏è Testing Configuration System"
        echo "==============================="
        
        # Test config template exists
        test -f config-template.json || { echo "‚ùå Missing config-template.json"; exit 1; }
        
        # Validate JSON syntax
        jq . config-template.json > /dev/null || { echo "‚ùå Invalid JSON in config-template.json"; exit 1; }
        
        # Test config loading
        source scripts/lib/config-utils.sh
        
        # Create test config
        cp config-template.json config.json
        sed -i 's/YOUR_GITHUB_USERNAME/test-user/g' config.json
        sed -i 's/YOUR_REPOSITORY_NAME/test-repo/g' config.json
        sed -i 's/YOUR_PROJECT_ID/PVT_test123/g' config.json
        
        # Test config validation
        if validate_config; then
          echo "‚úÖ Configuration system working"
        else
          echo "‚ùå Configuration system failed"
          exit 1
        fi

  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [security-tests, code-quality, integration-tests]
    if: always()
    
    steps:
    - name: Report results
      run: |
        echo "üéØ Test Summary"
        echo "==============="
        echo "Security Tests: ${{ needs.security-tests.result }}"
        echo "Code Quality: ${{ needs.code-quality.result }}"
        echo "Integration: ${{ needs.integration-tests.result }}"
        
        if [[ "${{ needs.security-tests.result }}" == "success" && \
              "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.integration-tests.result }}" == "success" ]]; then
          echo ""
          echo "üéâ ALL TESTS PASSED!"
          echo "‚úÖ Security: HARDENED"
          echo "‚úÖ Quality: VERIFIED" 
          echo "‚úÖ Integration: WORKING"
          echo ""
          echo "üöÄ Ready for production use!"
        else
          echo ""
          echo "‚ùå Some tests failed - review and fix issues"
          exit 1
        fi